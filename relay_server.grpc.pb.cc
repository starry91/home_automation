// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: relay_server.proto

#include "relay_server.pb.h"
#include "relay_server.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace py_server {

static const char* RelayServer_method_names[] = {
  "/py_server.RelayServer/get_state",
  "/py_server.RelayServer/set_state",
};

std::unique_ptr< RelayServer::Stub> RelayServer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< RelayServer::Stub> stub(new RelayServer::Stub(channel));
  return stub;
}

RelayServer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_get_state_(RelayServer_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_set_state_(RelayServer_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RelayServer::Stub::get_state(::grpc::ClientContext* context, const ::py_server::Details& request, ::py_server::State* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_get_state_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::py_server::State>* RelayServer::Stub::Asyncget_stateRaw(::grpc::ClientContext* context, const ::py_server::Details& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::py_server::State>::Create(channel_.get(), cq, rpcmethod_get_state_, context, request);
}

::grpc::Status RelayServer::Stub::set_state(::grpc::ClientContext* context, const ::py_server::Details& request, ::py_server::Response* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_set_state_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::py_server::Response>* RelayServer::Stub::Asyncset_stateRaw(::grpc::ClientContext* context, const ::py_server::Details& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::py_server::Response>::Create(channel_.get(), cq, rpcmethod_set_state_, context, request);
}

RelayServer::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      RelayServer_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< RelayServer::Service, ::py_server::Details, ::py_server::State>(
          std::mem_fn(&RelayServer::Service::get_state), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      RelayServer_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< RelayServer::Service, ::py_server::Details, ::py_server::Response>(
          std::mem_fn(&RelayServer::Service::set_state), this)));
}

RelayServer::Service::~Service() {
}

::grpc::Status RelayServer::Service::get_state(::grpc::ServerContext* context, const ::py_server::Details* request, ::py_server::State* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RelayServer::Service::set_state(::grpc::ServerContext* context, const ::py_server::Details* request, ::py_server::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace py_server

